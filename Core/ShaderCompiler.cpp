#include "ShaderCompiler.h"
#include <dxcapi.h>         // Be sure to link with dxcompiler.lib.

using namespace FrameDX12;

ComPtr<IDxcUtils> ShaderCompiler::sUtils;
ComPtr<IDxcCompiler3> ShaderCompiler::sCompiler;
ComPtr<IDxcIncludeHandler> ShaderCompiler::sIncludeHandler;

void ShaderCompiler::Init()
{
    // 
    // Create compiler and utils.
    //
    DxcCreateInstance(CLSID_DxcUtils, IID_PPV_ARGS(&sUtils));
    DxcCreateInstance(CLSID_DxcCompiler, IID_PPV_ARGS(&sCompiler));

    //
    // Create default include handler. (You can create your own...)
    //
    sUtils->CreateDefaultIncludeHandler(&sIncludeHandler);
}

CompiledShader ShaderCompiler::CompileShader(const std::wstring& path, const std::wstring& target, const std::wstring& entry_point)
{
    CompiledShader out;

    //
    // COMMAND LINE: dxc myshader.hlsl -E main -T ps_6_0 -Zi -D MYDEFINE=1 -Fo myshader.bin -Fd myshader.pdb -Qstrip_reflect
    //
    LPCWSTR pszArgs[] =
    {
        L"TODO",            // Optional shader source file name for error reporting and for PIX shader source view.  
        L"-E", entry_point.c_str(),              // Entry point.
        L"-T", target.c_str(),            // Target.
        L"-Zi",                      // Enable debug information (slim format)
        //L"-Fo", L"myshader.bin",     // Optional. Stored in the pdb. 
        //L"-Fd", L"myshader.pdb",     // The file name of the pdb. This must either be supplied or the autogenerated file name must be used.
        L"-Qstrip_reflect",          // Strip reflection into a separate blob. 
        L"-Qembed_debug",          //  Embed PDB in shader container (must be used with /Zi) 
    };

    //
    // Open source file.  
    //
    ComPtr<IDxcBlobEncoding> pSource = nullptr;
    sUtils->LoadFile(path.c_str(), nullptr, &pSource);
    DxcBuffer Source;
    Source.Ptr = pSource->GetBufferPointer();
    Source.Size = pSource->GetBufferSize();
    Source.Encoding = DXC_CP_ACP; // Assume BOM says UTF8 or UTF16 or this is ANSI text.

    //
    // Compile it with specified arguments.
    //
    ComPtr<IDxcResult> pResults;
    sCompiler->Compile(
        &Source,                // Source buffer.
        pszArgs,                // Array of pointers to arguments.
        _countof(pszArgs),      // Number of arguments.
        sIncludeHandler.Get(),        // User-provided interface to handle #include directives (optional).
        IID_PPV_ARGS(&pResults) // Compiler output status, buffer, and errors.
    );

    //
    // Print errors if present.
    //
    ComPtr<IDxcBlobUtf8> pErrors = nullptr;
    pResults->GetOutput(DXC_OUT_ERRORS, IID_PPV_ARGS(&pErrors), nullptr);
    // Note that d3dcompiler would return null if no errors or warnings are present.  
    // IDxcCompiler3::Compile will always return an error buffer, but its length will be zero if there are no warnings or errors.
    if (pErrors != nullptr && pErrors->GetStringLength() != 0)
        wprintf(L"Warnings and Errors:\n%S\n", pErrors->GetStringPointer());

    //
    // Quit if the compilation failed.
    //
    HRESULT hrStatus;
    pResults->GetStatus(&hrStatus);
    if (FAILED(hrStatus))
    {
        wprintf(L"Compilation Failed\n");
        return out;
    }

    //
    // Save shader binary.
    //
    ComPtr<IDxcBlobUtf16> pShaderName = nullptr;
    pResults->GetOutput(DXC_OUT_OBJECT, IID_PPV_ARGS(&out.shader), &pShaderName);
    /*if (out.shader != nullptr)
    {
        FILE* fp = NULL;

        _wfopen_s(&fp, pShaderName->GetStringPointer(), L"wb");
        fwrite(out.shader->GetBufferPointer(), out.shader->GetBufferSize(), 1, fp);
        fclose(fp);
    }*/

    //
    // Save pdb.
    //
    /*ComPtr<IDxcBlobUtf16> pPDBName = nullptr;
    pResults->GetOutput(DXC_OUT_PDB, IID_PPV_ARGS(&out.pdb), &pPDBName);
    if (out.pdb != nullptr)
    {
        FILE* fp = NULL;

        // Note that if you don't specify -Fd, a pdb name will be automatically generated. Use this file name to save the pdb so that PIX can find it quickly.
        _wfopen_s(&fp, pPDBName->GetStringPointer(), L"wb");
        fwrite(out.pdb->GetBufferPointer(), out.pdb->GetBufferSize(), 1, fp);
        fclose(fp);
    }*/

    //
    // Print hash.
    //
    pResults->GetOutput(DXC_OUT_SHADER_HASH, IID_PPV_ARGS(&out.hash), nullptr);
    if (out.hash != nullptr)
    {
        wprintf(L"Hash: ");
        DxcShaderHash* pHashBuf = (DxcShaderHash*)out.hash->GetBufferPointer();
        for (int i = 0; i < _countof(pHashBuf->HashDigest); i++)
            wprintf(L"%x", pHashBuf->HashDigest[i]);
        wprintf(L"\n");
    }


    //
    // Get separate reflection.
    //
    pResults->GetOutput(DXC_OUT_REFLECTION, IID_PPV_ARGS(&out.reflection_raw), nullptr);
    if (out.reflection_raw != nullptr)
    {
        // Optionally, save reflection blob for later here.

        // Create reflection interface.
        DxcBuffer ReflectionData;
        ReflectionData.Encoding = DXC_CP_ACP;
        ReflectionData.Ptr = out.reflection_raw->GetBufferPointer();
        ReflectionData.Size = out.reflection_raw->GetBufferSize();

        sUtils->CreateReflection(&ReflectionData, IID_PPV_ARGS(&out.reflection));
    }

	return out;
}
